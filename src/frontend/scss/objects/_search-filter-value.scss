$richie-search-filter-value-padding: 0.4rem 0.5rem 0.4rem 0 !default;
$richie-search-filter-value-fontcolor: rgba(var(--color-white), 0.85) !default;
$richie-search-filter-value-fontcolor-hover: var(--color-white) !default;

$richie-search-filter-value-active-fontcolor: var(--color-white) !default;
$richie-search-filter-value-active-divider-border: 1px solid var(--color-white) !default;

.search-filter-value-leaf,
.search-filter-value-parent__self__label {
    align-items: center;
    margin-bottom: 0;
    border: none;
    background: inherit;
    color: $richie-search-filter-value-fontcolor;
    font-size: 1rem;
    cursor: pointer;

    &:hover,
    &:focus {
        z-index: 1; // Place hover/active items above their siblings for proper border styling
        color: $richie-search-filter-value-fontcolor-hover;
    }

    &--disabled,
    &--disabled:hover,
    &--disabled:focus {
        color: rgba(255, 255, 255, 0.6);
        cursor: not-allowed;
    }

    &__checkbox {
        align-self: start;
        margin-right: 0.5rem;
        margin-top: 0.2rem;
        font-size: 1rem;
    }

    &__content {
        flex-grow: 1;
        padding: 0 0 0 2rem;
        text-align: start;

        &__count {
            display: inline; // So &nbsp; can prevent linebreaks between the name and the count badge
            color: $white;
            background: $firebrick6;
            margin-left: 0.375rem;
        }
    }
}

// Most active styles are done on the filter button itself (which is the component itself for leaves
// and an inner part for parents)
.search-filter-value-leaf.active,
.search-filter-value-parent__self.active
> .search-filter-value-parent__self__label {
    z-index: 2; // Place active items above their siblings for proper border styling
    color: $richie-search-filter-value-active-fontcolor;
}

// Border styling needs to be done on an outer component for parents, incl. active styling
.search-filter-value-leaf,
.search-filter-value-parent__self {
    display: flex;
    padding: $richie-search-filter-value-padding;
}

.search-filter-value-parent {
    display: flex;
    flex-direction: column;
    padding: 0; // Padding is applied by __self & leaves, not parent

    &__self {
        padding-right: 0; // Make room for the +/-

        &__label {
            display: flex;
            flex-grow: 1;
            padding: 0;
            text-align: start;
        }

        &__unfold {
            border: 0;
            margin-left: 0.4rem;
            padding: 0 0.15rem;
            background: inherit;
            color: white;
            transition: 0.2s ease-in-out;
            line-height: 1.5rem;
            font-size: 1.3rem;
            font-weight: 200;
        }
    }

    &__children {
        display: flex;
        flex-direction: column;
        margin-left: 1.5rem;
    }
}


/* input Checkbox */

.search-filter-value-leaf__checkbox {
    clip: rect(1px, 1px, 1px, 1px);
    position: absolute !important;
    height: 1px;
    width: 1px;
    overflow: hidden;

    &:focus {
        display: none;
    }
}

.search-filter-value-leaf__checkbox + .search-filter-value-leaf__content {
    cursor: pointer;
    display: inline-block;
    line-height: calc(22 / 16);
    margin-bottom: 0;
    position: relative;
    vertical-align: middle;
}

.search-filter-value-leaf__checkbox + .search-filter-value-leaf__content:before {
    border: 3px solid var(--color-white);
    content: '';
    display: inline-block;
    height: 15px;
    left: 0px;
    position: absolute;
    top: 3px;
    vertical-align: middle;
    width: 15px;
}

.search-filter-value-leaf__checkbox:checked + .search-filter-value-leaf__content:before {
    background: var(--color-white);
}